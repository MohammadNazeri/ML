# -*- coding: utf-8 -*-
"""Major Assignment 1-3-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e12BT9bMHQPOJIhb45qwaQHZjaN4j58o
"""

import math
import random
import numpy as np
import requests
import pandas as pd
import torch
import torch.optim as optim
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

"""#Question 3
Part1
"""

dataframe = pd.read_csv("/content/sample_data/Health Insurance Dataset.csv")
dataframe['bmi'] = dataframe['bmi'].str.replace('٫', '.')
dataframe['charges'] = dataframe['charges'].str.replace('٫', '.')

dataframe_num = dataframe
replacement_map = {'male': 1, 'female': 0}
dataframe_num['sex'] = dataframe_num['sex'].replace(replacement_map)
replacement_map = {'no': 0, 'yes': 1}
dataframe_num['smoker'] = dataframe_num['smoker'].replace(replacement_map)
replacement_map = {'southwest': 0, 'northwest': 1, 'northeast':2 , 'southeast':3}
dataframe_num['region'] = dataframe_num['region'].replace(replacement_map)
dataframe_num['charges'] = pd.to_numeric(dataframe_num['charges'], errors='coerce', downcast='float')
dataframe_num['bmi'] = pd.to_numeric(dataframe_num['bmi'], errors='coerce', downcast='float')

dataframe_x = dataframe_num[dataframe_num.columns.difference(['charges'])]
X_train, X_test, y_train, y_test = train_test_split(dataframe_x, dataframe_num['charges'], test_size=0.3)

X_trn_torch = torch.tensor(X_train.values,dtype=torch.float32)
y_trn_torch = torch.tensor(y_train.values,dtype=torch.float32)
X_tst_torch = torch.tensor(X_test.values,dtype=torch.float32)
y_tst_torch = torch.tensor(y_test.values,dtype=torch.float32)

torch.manual_seed(0)

model = torch.nn.Sequential(
    torch.nn.Linear(6, 256),
    torch.nn.ReLU(),
    torch.nn.Linear(256, 128),
    torch.nn.ReLU(),
    torch.nn.Linear(128, 1),
)
loss_module = torch.nn.MSELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.01)

num_epochs = 10
#model.train()
for epoch in range(num_epochs):
    y_train_preds = model(X_trn_torch)
    loss = loss_module(y_train_preds, y_trn_torch)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    break
#print(model.state_dict())
#print(loss_module(model(X_tst_torch), y_tst_torch))

y_train_pred = model(X_trn_torch)
mse = loss_module(y_train_pred, y_trn_torch)
print("The mean square error on training data: ",mse)
y_tst_pred = model(X_tst_torch)
mse = loss_module(y_tst_pred, y_tst_torch)
print("The mean square error on testing data: ",mse)