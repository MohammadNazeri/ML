# -*- coding: utf-8 -*-
"""Major Assignment 1-3-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1weS7AqxeVsWrGw-J1h-K5zHsCV6q2joM

#Question 3
Part 2
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
import torch
import torch.optim as optim
from sklearn.metrics import classification_report

dataframe = pd.read_csv("/content/sample_data/lung cancer dataset.csv")

dataframe_num = dataframe
replacement_map = {'F': 1, 'M': 2}
dataframe_num['GENDER'] = dataframe_num['GENDER'].replace(replacement_map)
replacement_map = {'NO': 0, 'YES': 1}
dataframe_num['LUNG_CANCER'] = dataframe_num['LUNG_CANCER'].replace(replacement_map)

dataframe_x = dataframe_num[dataframe_num.columns.difference(['LUNG_CANCER'])]
X_train, X_test, y_train, y_test = train_test_split(dataframe_x, dataframe_num['LUNG_CANCER'], test_size=0.3)

X_trn_torch = torch.tensor(X_train.values,dtype=torch.float32)
y_trn_torch = torch.tensor(y_train.values,dtype=torch.float32)
X_tst_torch = torch.tensor(X_test.values,dtype=torch.float32)
y_tst_torch = torch.tensor(y_test.values,dtype=torch.float32)

model = torch.nn.Sequential(
    torch.nn.Linear(15,256),
    torch.nn.ReLU(),
    torch.nn.Linear(256,128),
    torch.nn.Sigmoid(),
    torch.nn.Linear(128,1),
    torch.nn.Sigmoid()
    )
loss = torch.nn.BCELoss()
optimizer = optim.SGD(model.parameters(), lr=0.5)

num_epochs = 1000

for epoch in range(num_epochs):
    y_train_pred = model(X_trn_torch)
    l = loss(y_train_pred, y_trn_torch.view(-1, 1))

    optimizer.zero_grad()
    l.backward()
    optimizer.step()

#y_test_pred = model(X_tst_torch)
#print(loss(y_test_pred, y_tst_torch.view(-1, 1)))

y_train_pred = model(X_trn_torch)
y_train_pred_out = (y_train_pred > 0.5).float()
correct = (y_train_pred_out[:,0] == y_trn_torch).sum().item()
print("The accuracy of model in train data is: ", correct/len(y_train_pred_out))
print("The output of loss function is: ",loss(y_train_pred, y_trn_torch.view(-1, 1)))
y_test_pred = model(X_tst_torch)
y_test_pred_out = (y_test_pred > 0.5).float()
correct = (y_test_pred_out[:,0] == y_tst_torch).sum().item()
print("The accuracy of model in test data is: ", correct/len(y_test_pred_out))
print("The output of loss function is: ",loss(y_train_pred, y_trn_torch.view(-1, 1)))
print(loss(y_test_pred, y_tst_torch.view(-1, 1)))